#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Jul  3 09:56:42 2018

@author: lewis
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as cm
from scipy import ndimage
from scipy import signal
import scipy.signal as sg
from astropy.io import fits
from PIL import Image
import astropy.stats
import numpy.ma
import importlib
importlib.import_module('mpl_toolkits.mplot3d').Axes3D
from skimage import img_as_bool, io, color, morphology
from skimage.morphology import skeletonize
from skimage import measure
from numpy import random
from scipy import signal
from skimage import measure
import copy
from astropy.wcs import WCS
from astropy.io import fits
from astropy.utils.data import get_pkg_data_filename
from astropy.coordinates import ICRS, Galactic
from astropy import units as u
import matplotlib.ticker as mticker
import math



filename = get_pkg_data_filename('12_ogg2m001-fs02-20160321-0059-e90.fits')
hdu_list=fits.open(filename)
hdu = fits.open(filename)[0]
wcs = WCS(hdu.header)
image_data1=hdu.data
hdu_list.close()

filename = get_pkg_data_filename('5_ogg2m001-fs02-20160309-0087-e90.fits')
hdu_list=fits.open(filename)
hdu = fits.open(filename)[0]
wcs2 = WCS(hdu.header)
image_data2=hdu.data
hdu_list.close()


#takes 2 images 
#convert pixels of i1 into galactic coordinates 


def coords(data1,data2,system,system2): 
    x=data1.shape[1]
    y=data1.shape[0]
    grid=np.ones((y,x))
    points=np.where(grid==1)
    pointsy,pointsx=points[0],points[1]
    coords1=system.wcs_pix2world(pointsx,pointsy,1)
    coordsy,coordsx=coords1[1],coords1[0]
    c_join=(coordsy,coordsx)
    return c_join,points
#    points_converted=system2.wcs_world2pix(coordsx,coordsy,1)
#    points2y,points2x=np.int_(points_converted[1]),np.int_(points_converted[0])
#    points_converted=(points2y,points2x)
    

#coordinates1,points1 = coords(image_data1,image_data2,wcs,wcs2)
#coordinates2,points2= coords(image_data2,image_data1,wcs2,wcs)
#
#
#y1,x1=image_data1.shape
#y2,x2=image_data2.shape
#
#co1y=coordinates1[0]
#co1x=coordinates1[1]
#co2y=coordinates2[0]
#co2x=coordinates2[1]
#if y1*x1 > y2*x2:
#    
#    minx,maxx=coordinates2[1].min(),coordinates2[1].max()
#    miny,maxy=coordinates2[0].min(),coordinates2[0].max()
#    co1x_new=co1x[np.where((co1x>minx) & (co1x<maxx) & (co1y>miny) & (co1y<maxy))]
#    co1y_new=co1y[np.where((co1x>minx) & (co1x<maxx) & (co1y>miny) & (co1y<maxy))]
#    places=np.where(coordinates1==(co1y_new,co1x_new))
#    
#else:
#    image_new=np.zeros_like(image_data2)
#    minx,maxx=coordinates1[1].min(),coordinates1[1].max()
#    miny,maxy=coordinates1[0].min(),coordinates1[0].max() 
#    
#    placex=np.where((co2x>minx) & (co2y<maxx) & (co2y>miny) & (co2y<maxy))
#    placey=np.where((co2x>minx) & (co2y<maxx) & (co2y>miny) & (co2y<maxy))
#    place=(placey,placex)
#    new=points2[0][placey],points2[1][placex]
#    
#    sizexmin,sizexmax=min(new[1]),max(new[1])
#    sizex=sizexmax-sizexmin
#    sizeymin,sizeymax=min(new[0]),max(new[0])
#    sizey=sizeymax-sizeymin
#    image_new=np.zeros((sizey,sizex))
#    image_new[new]=image_data2[new]
#    
#    co2x_new=co2x[placex]
#    co2y_new=co2y[placey]
    

    



